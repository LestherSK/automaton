automaton
todo list


ui pages:
- trouble code viewer
- trouble code clearer
- proprietary PID scanner
  (brute force modes and PIDs; try the AT MA command, page 40 of the ELM327 ds)
  (also try AT SH to address commands to other bus endpoints/controllers)

power saving, in order of savings:
- AVR: turn off peripherals not in use
- AVR idle: use low-power mode
- screen off
- sleep mode: put STN and AVR in low-power mode
- off switch
- disconnect obd cable

graphs:
- use partial vertical blocks to do bar graphs

grouping:
- put die, reset, wdt, power stuff under one directory
- keep mcusr value in there somewhere

clock/voltage:
- run at 3.3V
  - done
    - switch crystal from 20MHz to 12MHz
    - resolder FTDI: 3V out, 3V signal level
    - change F_CPU
    - rewire regulators
    - LCD to 5V
    - MCP2551 to 5V
    - brownout detect level to 2.7
    - remove 4050
    - update time-based enums
  - to do
    - LED resistors

alarm:
- use the same timer for multiple alarms

pc uart:
- variadic logging function with log level parameter?
- use ANSI colors for different log levels

code:
- handle all TODO's and #warning's
- standard greppable comment for REMOVE ME etc

debug:
- in UART code, _BREAK() then die() on errors (eg: dev is neither 0 nor 1)

avarice:
- recompile with atmega324a support

redo:
- load: program the eeprom
- *.o:  do .dep generation in one step (as in manual)
- when avr-gcc-4.8 is fixed, add:
  - -Waddr-space-convert
  - -fno-diagnostics-show-caret

button:
- read up and get RC values for hw debounce

algo/fifo & io/uart:
- read assembly generated by gcc and ensure that atomic/interrupt-safe functions
  don't take dangerous shortcuts and also don't over-access memory

storage:
- replace fat32 with something that won't explode if the power goes out
- my idea: append-only filesystem for logging:
  - two superblocks, updated alternately, with revision number and checksum
  - use most recent version that is valid
  - superblock says what the latest valid block is
  - to append a block: do the write, then update the superblock
  - worst case, lose the latest block only

time:
- add profiling interface
  - use TIMER1 to count cycles, probably
  - profiling targets:
    - all ISRs (especially TIMER0_COMPA with button_update)
    - all delay/alarm code (test for correctness)

lcd/hd44780:
- implement timeout for hd44780_busy_wait
- use 4-bit bus

lcd/lcd:
- make friendly functions to manipulate individual bits of param state
- custom font api

stdio:
- implement a smaller/simpler vfprintf(); override?

power:
- use sleep instead of spinning or _delay_xx
- go to 3.3 volts

hardware:
- use leds everywhere
  - power
  - tx/rx on each UART
  - tx/rx on each OBD interface
  - r/w on SDcard
  - sck on SPI bus
  - buttons?

test:
- time/alarm
- algo/fifo
- io/uart
- io/spi
- lcd/hd44780
